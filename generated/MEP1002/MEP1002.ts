// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AllChildrenRejected extends ethereum.Event {
  get params(): AllChildrenRejected__Params {
    return new AllChildrenRejected__Params(this);
  }
}

export class AllChildrenRejected__Params {
  _event: AllChildrenRejected;

  constructor(event: AllChildrenRejected) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ChildAccepted extends ethereum.Event {
  get params(): ChildAccepted__Params {
    return new ChildAccepted__Params(this);
  }
}

export class ChildAccepted__Params {
  _event: ChildAccepted;

  constructor(event: ChildAccepted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get childIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get childAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get childId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ChildProposed extends ethereum.Event {
  get params(): ChildProposed__Params {
    return new ChildProposed__Params(this);
  }
}

export class ChildProposed__Params {
  _event: ChildProposed;

  constructor(event: ChildProposed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get childIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get childAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get childId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ChildTransferred extends ethereum.Event {
  get params(): ChildTransferred__Params {
    return new ChildTransferred__Params(this);
  }
}

export class ChildTransferred__Params {
  _event: ChildTransferred;

  constructor(event: ChildTransferred) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get childIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get childAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get childId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fromPending(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class ControllerChanged extends ethereum.Event {
  get params(): ControllerChanged__Params {
    return new ControllerChanged__Params(this);
  }
}

export class ControllerChanged__Params {
  _event: ControllerChanged;

  constructor(event: ControllerChanged) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MEP1002TokenUpdateName extends ethereum.Event {
  get params(): MEP1002TokenUpdateName__Params {
    return new MEP1002TokenUpdateName__Params(this);
  }
}

export class MEP1002TokenUpdateName__Params {
  _event: MEP1002TokenUpdateName;

  constructor(event: MEP1002TokenUpdateName) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class NestTransfer extends ethereum.Event {
  get params(): NestTransfer__Params {
    return new NestTransfer__Params(this);
  }
}

export class NestTransfer__Params {
  _event: NestTransfer;

  constructor(event: NestTransfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fromTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get toTokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MEP1002__childOfResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get contractAddress(): Address {
    return this[1].toAddress();
  }
}

export class MEP1002__childrenOfResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get contractAddress(): Address {
    return this[1].toAddress();
  }
}

export class MEP1002__directOwnerOfResult {
  value0: Address;
  value1: BigInt;
  value2: boolean;

  constructor(value0: Address, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): boolean {
    return this.value2;
  }
}

export class MEP1002__pendingChildOfResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get contractAddress(): Address {
    return this[1].toAddress();
  }
}

export class MEP1002__pendingChildrenOfResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get contractAddress(): Address {
    return this[1].toAddress();
  }
}

export class MEP1002 extends ethereum.SmartContract {
  static bind(address: Address): MEP1002 {
    return new MEP1002("MEP1002", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(tokenId: BigInt, maxChildrenBurns: BigInt): BigInt {
    let result = super.call("burn", "burn(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(maxChildrenBurns)
    ]);

    return result[0].toBigInt();
  }

  try_burn(
    tokenId: BigInt,
    maxChildrenBurns: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burn", "burn(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(maxChildrenBurns)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  childIsInActive(childAddress: Address, childId: BigInt): boolean {
    let result = super.call(
      "childIsInActive",
      "childIsInActive(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(childAddress),
        ethereum.Value.fromUnsignedBigInt(childId)
      ]
    );

    return result[0].toBoolean();
  }

  try_childIsInActive(
    childAddress: Address,
    childId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "childIsInActive",
      "childIsInActive(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(childAddress),
        ethereum.Value.fromUnsignedBigInt(childId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  childOf(parentId: BigInt, index: BigInt): MEP1002__childOfResultValue0Struct {
    let result = super.call(
      "childOf",
      "childOf(uint256,uint256):((uint256,address))",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return changetype<MEP1002__childOfResultValue0Struct>(result[0].toTuple());
  }

  try_childOf(
    parentId: BigInt,
    index: BigInt
  ): ethereum.CallResult<MEP1002__childOfResultValue0Struct> {
    let result = super.tryCall(
      "childOf",
      "childOf(uint256,uint256):((uint256,address))",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MEP1002__childOfResultValue0Struct>(value[0].toTuple())
    );
  }

  childrenOf(parentId: BigInt): Array<MEP1002__childrenOfResultValue0Struct> {
    let result = super.call(
      "childrenOf",
      "childrenOf(uint256):((uint256,address)[])",
      [ethereum.Value.fromUnsignedBigInt(parentId)]
    );

    return result[0].toTupleArray<MEP1002__childrenOfResultValue0Struct>();
  }

  try_childrenOf(
    parentId: BigInt
  ): ethereum.CallResult<Array<MEP1002__childrenOfResultValue0Struct>> {
    let result = super.tryCall(
      "childrenOf",
      "childrenOf(uint256):((uint256,address)[])",
      [ethereum.Value.fromUnsignedBigInt(parentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<MEP1002__childrenOfResultValue0Struct>()
    );
  }

  controllers(param0: Address): boolean {
    let result = super.call("controllers", "controllers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_controllers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("controllers", "controllers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  directOwnerOf(tokenId: BigInt): MEP1002__directOwnerOfResult {
    let result = super.call(
      "directOwnerOf",
      "directOwnerOf(uint256):(address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new MEP1002__directOwnerOfResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_directOwnerOf(
    tokenId: BigInt
  ): ethereum.CallResult<MEP1002__directOwnerOfResult> {
    let result = super.tryCall(
      "directOwnerOf",
      "directOwnerOf(uint256):(address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MEP1002__directOwnerOfResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  geolocation(tokenId: BigInt): BigInt {
    let result = super.call("geolocation", "geolocation(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_geolocation(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "geolocation",
      "geolocation(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingChildOf(
    parentId: BigInt,
    index: BigInt
  ): MEP1002__pendingChildOfResultValue0Struct {
    let result = super.call(
      "pendingChildOf",
      "pendingChildOf(uint256,uint256):((uint256,address))",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return changetype<MEP1002__pendingChildOfResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_pendingChildOf(
    parentId: BigInt,
    index: BigInt
  ): ethereum.CallResult<MEP1002__pendingChildOfResultValue0Struct> {
    let result = super.tryCall(
      "pendingChildOf",
      "pendingChildOf(uint256,uint256):((uint256,address))",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MEP1002__pendingChildOfResultValue0Struct>(value[0].toTuple())
    );
  }

  pendingChildrenOf(
    parentId: BigInt
  ): Array<MEP1002__pendingChildrenOfResultValue0Struct> {
    let result = super.call(
      "pendingChildrenOf",
      "pendingChildrenOf(uint256):((uint256,address)[])",
      [ethereum.Value.fromUnsignedBigInt(parentId)]
    );

    return result[0].toTupleArray<
      MEP1002__pendingChildrenOfResultValue0Struct
    >();
  }

  try_pendingChildrenOf(
    parentId: BigInt
  ): ethereum.CallResult<Array<MEP1002__pendingChildrenOfResultValue0Struct>> {
    let result = super.tryCall(
      "pendingChildrenOf",
      "pendingChildrenOf(uint256):((uint256,address)[])",
      [ethereum.Value.fromUnsignedBigInt(parentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<MEP1002__pendingChildrenOfResultValue0Struct>()
    );
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenNames(param0: BigInt): string {
    let result = super.call("tokenNames", "tokenNames(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_tokenNames(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenNames", "tokenNames(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class __Controllable_initCall extends ethereum.Call {
  get inputs(): __Controllable_initCall__Inputs {
    return new __Controllable_initCall__Inputs(this);
  }

  get outputs(): __Controllable_initCall__Outputs {
    return new __Controllable_initCall__Outputs(this);
  }
}

export class __Controllable_initCall__Inputs {
  _call: __Controllable_initCall;

  constructor(call: __Controllable_initCall) {
    this._call = call;
  }
}

export class __Controllable_initCall__Outputs {
  _call: __Controllable_initCall;

  constructor(call: __Controllable_initCall) {
    this._call = call;
  }
}

export class AcceptChildCall extends ethereum.Call {
  get inputs(): AcceptChildCall__Inputs {
    return new AcceptChildCall__Inputs(this);
  }

  get outputs(): AcceptChildCall__Outputs {
    return new AcceptChildCall__Outputs(this);
  }
}

export class AcceptChildCall__Inputs {
  _call: AcceptChildCall;

  constructor(call: AcceptChildCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get childIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get childAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get childId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AcceptChildCall__Outputs {
  _call: AcceptChildCall;

  constructor(call: AcceptChildCall) {
    this._call = call;
  }
}

export class AddChildCall extends ethereum.Call {
  get inputs(): AddChildCall__Inputs {
    return new AddChildCall__Inputs(this);
  }

  get outputs(): AddChildCall__Outputs {
    return new AddChildCall__Outputs(this);
  }
}

export class AddChildCall__Inputs {
  _call: AddChildCall;

  constructor(call: AddChildCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get childId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AddChildCall__Outputs {
  _call: AddChildCall;

  constructor(call: AddChildCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class Burn1Call extends ethereum.Call {
  get inputs(): Burn1Call__Inputs {
    return new Burn1Call__Inputs(this);
  }

  get outputs(): Burn1Call__Outputs {
    return new Burn1Call__Outputs(this);
  }
}

export class Burn1Call__Inputs {
  _call: Burn1Call;

  constructor(call: Burn1Call) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxChildrenBurns(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Burn1Call__Outputs {
  _call: Burn1Call;

  constructor(call: Burn1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get namingTokenAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get geolocation_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class NestTransferFromCall extends ethereum.Call {
  get inputs(): NestTransferFromCall__Inputs {
    return new NestTransferFromCall__Inputs(this);
  }

  get outputs(): NestTransferFromCall__Outputs {
    return new NestTransferFromCall__Outputs(this);
  }
}

export class NestTransferFromCall__Inputs {
  _call: NestTransferFromCall;

  constructor(call: NestTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get destinationId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class NestTransferFromCall__Outputs {
  _call: NestTransferFromCall;

  constructor(call: NestTransferFromCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RejectAllChildrenCall extends ethereum.Call {
  get inputs(): RejectAllChildrenCall__Inputs {
    return new RejectAllChildrenCall__Inputs(this);
  }

  get outputs(): RejectAllChildrenCall__Outputs {
    return new RejectAllChildrenCall__Outputs(this);
  }
}

export class RejectAllChildrenCall__Inputs {
  _call: RejectAllChildrenCall;

  constructor(call: RejectAllChildrenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxRejections(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RejectAllChildrenCall__Outputs {
  _call: RejectAllChildrenCall;

  constructor(call: RejectAllChildrenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResetNameCall extends ethereum.Call {
  get inputs(): ResetNameCall__Inputs {
    return new ResetNameCall__Inputs(this);
  }

  get outputs(): ResetNameCall__Outputs {
    return new ResetNameCall__Outputs(this);
  }
}

export class ResetNameCall__Inputs {
  _call: ResetNameCall;

  constructor(call: ResetNameCall) {
    this._call = call;
  }

  get geolocation_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetNameCall__Outputs {
  _call: ResetNameCall;

  constructor(call: ResetNameCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetMNSTokenCall extends ethereum.Call {
  get inputs(): SetMNSTokenCall__Inputs {
    return new SetMNSTokenCall__Inputs(this);
  }

  get outputs(): SetMNSTokenCall__Outputs {
    return new SetMNSTokenCall__Outputs(this);
  }
}

export class SetMNSTokenCall__Inputs {
  _call: SetMNSTokenCall;

  constructor(call: SetMNSTokenCall) {
    this._call = call;
  }

  get mnsToken_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMNSTokenCall__Outputs {
  _call: SetMNSTokenCall;

  constructor(call: SetMNSTokenCall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get geolocation_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nameWrapperTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetNamingTokenCall extends ethereum.Call {
  get inputs(): SetNamingTokenCall__Inputs {
    return new SetNamingTokenCall__Inputs(this);
  }

  get outputs(): SetNamingTokenCall__Outputs {
    return new SetNamingTokenCall__Outputs(this);
  }
}

export class SetNamingTokenCall__Inputs {
  _call: SetNamingTokenCall;

  constructor(call: SetNamingTokenCall) {
    this._call = call;
  }

  get namingTokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseURI_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetNamingTokenCall__Outputs {
  _call: SetNamingTokenCall;

  constructor(call: SetNamingTokenCall) {
    this._call = call;
  }
}

export class TransferChildCall extends ethereum.Call {
  get inputs(): TransferChildCall__Inputs {
    return new TransferChildCall__Inputs(this);
  }

  get outputs(): TransferChildCall__Outputs {
    return new TransferChildCall__Outputs(this);
  }
}

export class TransferChildCall__Inputs {
  _call: TransferChildCall;

  constructor(call: TransferChildCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get destinationId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get childIndex(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get childAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get childId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get isPending(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get data(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class TransferChildCall__Outputs {
  _call: TransferChildCall;

  constructor(call: TransferChildCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _logic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
