// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get priceInWei(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get expiresAt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OrderSuccessful extends ethereum.Event {
  get params(): OrderSuccessful__Params {
    return new OrderSuccessful__Params(this);
  }
}

export class OrderSuccessful__Params {
  _event: OrderSuccessful;

  constructor(event: OrderSuccessful) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get totalPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MXCMarketplace__assertPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPrice(): BigInt {
    return this.value0;
  }

  getTransactions(): BigInt {
    return this.value1;
  }
}

export class MXCMarketplace__cancelOrderResultValue0Struct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get nftAddress(): Address {
    return this[2].toAddress();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get expiresAt(): BigInt {
    return this[4].toBigInt();
  }
}

export class MXCMarketplace__orderByAssetIdResult {
  value0: Bytes;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Bytes,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getId(): Bytes {
    return this.value0;
  }

  getSeller(): Address {
    return this.value1;
  }

  getNftAddress(): Address {
    return this.value2;
  }

  getPrice(): BigInt {
    return this.value3;
  }

  getExpiresAt(): BigInt {
    return this.value4;
  }
}

export class MXCMarketplace extends ethereum.SmartContract {
  static bind(address: Address): MXCMarketplace {
    return new MXCMarketplace("MXCMarketplace", address);
  }

  ERC721_Interface(): Bytes {
    let result = super.call(
      "ERC721_Interface",
      "ERC721_Interface():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_ERC721_Interface(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ERC721_Interface",
      "ERC721_Interface():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  assertPrice(
    param0: Address,
    param1: BigInt
  ): MXCMarketplace__assertPriceResult {
    let result = super.call(
      "assertPrice",
      "assertPrice(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new MXCMarketplace__assertPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_assertPrice(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<MXCMarketplace__assertPriceResult> {
    let result = super.tryCall(
      "assertPrice",
      "assertPrice(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MXCMarketplace__assertPriceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  cancelOrder(
    nftAddress: Address,
    assetId: BigInt
  ): MXCMarketplace__cancelOrderResultValue0Struct {
    let result = super.call(
      "cancelOrder",
      "cancelOrder(address,uint256):((bytes32,address,address,uint256,uint256))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(assetId)
      ]
    );

    return changetype<MXCMarketplace__cancelOrderResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_cancelOrder(
    nftAddress: Address,
    assetId: BigInt
  ): ethereum.CallResult<MXCMarketplace__cancelOrderResultValue0Struct> {
    let result = super.tryCall(
      "cancelOrder",
      "cancelOrder(address,uint256):((bytes32,address,address,uint256,uint256))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(assetId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MXCMarketplace__cancelOrderResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  orderByAssetId(
    param0: Address,
    param1: BigInt
  ): MXCMarketplace__orderByAssetIdResult {
    let result = super.call(
      "orderByAssetId",
      "orderByAssetId(address,uint256):(bytes32,address,address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new MXCMarketplace__orderByAssetIdResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_orderByAssetId(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<MXCMarketplace__orderByAssetIdResult> {
    let result = super.tryCall(
      "orderByAssetId",
      "orderByAssetId(address,uint256):(bytes32,address,address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MXCMarketplace__orderByAssetIdResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assetId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get value0(): CancelOrderCallValue0Struct {
    return changetype<CancelOrderCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class CancelOrderCallValue0Struct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get nftAddress(): Address {
    return this[2].toAddress();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get expiresAt(): BigInt {
    return this[4].toBigInt();
  }
}

export class CreateOrderCall extends ethereum.Call {
  get inputs(): CreateOrderCall__Inputs {
    return new CreateOrderCall__Inputs(this);
  }

  get outputs(): CreateOrderCall__Outputs {
    return new CreateOrderCall__Outputs(this);
  }
}

export class CreateOrderCall__Inputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assetId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get priceInWei(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expiresAt(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateOrderCall__Outputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }
}

export class ExecuteOrderCall extends ethereum.Call {
  get inputs(): ExecuteOrderCall__Inputs {
    return new ExecuteOrderCall__Inputs(this);
  }

  get outputs(): ExecuteOrderCall__Outputs {
    return new ExecuteOrderCall__Outputs(this);
  }
}

export class ExecuteOrderCall__Inputs {
  _call: ExecuteOrderCall;

  constructor(call: ExecuteOrderCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assetId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExecuteOrderCall__Outputs {
  _call: ExecuteOrderCall;

  constructor(call: ExecuteOrderCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
