// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class delCollectionEvent extends ethereum.Event {
  get params(): delCollectionEvent__Params {
    return new delCollectionEvent__Params(this);
  }
}

export class delCollectionEvent__Params {
  _event: delCollectionEvent;

  constructor(event: delCollectionEvent) {
    this._event = event;
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class editCollectionEvent extends ethereum.Event {
  get params(): editCollectionEvent__Params {
    return new editCollectionEvent__Params(this);
  }
}

export class editCollectionEvent__Params {
  _event: editCollectionEvent;

  constructor(event: editCollectionEvent) {
    this._event = event;
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class newCollectionEvent extends ethereum.Event {
  get params(): newCollectionEvent__Params {
    return new newCollectionEvent__Params(this);
  }
}

export class newCollectionEvent__Params {
  _event: newCollectionEvent;

  constructor(event: newCollectionEvent) {
    this._event = event;
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MXCCollectionFactory__collectionsResult {
  value0: string;
  value1: Address;
  value2: Address;

  constructor(value0: string, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getIpfs(): string {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getCollection(): Address {
    return this.value2;
  }
}

export class MXCCollectionFactory__fetchCollectionResultValue0Struct extends ethereum.Tuple {
  get ipfs(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get collection(): Address {
    return this[2].toAddress();
  }
}

export class MXCCollectionFactory__fetchCollectionsResultValue0Struct extends ethereum.Tuple {
  get ipfs(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get collection(): Address {
    return this[2].toAddress();
  }
}

export class MXCCollectionFactory__fetchUserCollectionsResultValue0Struct extends ethereum.Tuple {
  get ipfs(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get collection(): Address {
    return this[2].toAddress();
  }
}

export class MXCCollectionFactory extends ethereum.SmartContract {
  static bind(address: Address): MXCCollectionFactory {
    return new MXCCollectionFactory("MXCCollectionFactory", address);
  }

  collections(param0: BigInt): MXCCollectionFactory__collectionsResult {
    let result = super.call(
      "collections",
      "collections(uint256):(string,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MXCCollectionFactory__collectionsResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_collections(
    param0: BigInt
  ): ethereum.CallResult<MXCCollectionFactory__collectionsResult> {
    let result = super.tryCall(
      "collections",
      "collections(uint256):(string,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MXCCollectionFactory__collectionsResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  createCollection(
    _marketplaceAddress: Address,
    _name: string,
    _symbol: string,
    _royaltiesCutPerMillion: BigInt,
    _royaltyRecipient: Address,
    _ipfs: string
  ): Address {
    let result = super.call(
      "createCollection",
      "createCollection(address,string,string,uint256,address,string):(address)",
      [
        ethereum.Value.fromAddress(_marketplaceAddress),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_royaltiesCutPerMillion),
        ethereum.Value.fromAddress(_royaltyRecipient),
        ethereum.Value.fromString(_ipfs)
      ]
    );

    return result[0].toAddress();
  }

  try_createCollection(
    _marketplaceAddress: Address,
    _name: string,
    _symbol: string,
    _royaltiesCutPerMillion: BigInt,
    _royaltyRecipient: Address,
    _ipfs: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createCollection",
      "createCollection(address,string,string,uint256,address,string):(address)",
      [
        ethereum.Value.fromAddress(_marketplaceAddress),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_royaltiesCutPerMillion),
        ethereum.Value.fromAddress(_royaltyRecipient),
        ethereum.Value.fromString(_ipfs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  delCollection(_collection: Address): Address {
    let result = super.call(
      "delCollection",
      "delCollection(address):(address)",
      [ethereum.Value.fromAddress(_collection)]
    );

    return result[0].toAddress();
  }

  try_delCollection(_collection: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "delCollection",
      "delCollection(address):(address)",
      [ethereum.Value.fromAddress(_collection)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fetchCollection(
    _collection: Address
  ): MXCCollectionFactory__fetchCollectionResultValue0Struct {
    let result = super.call(
      "fetchCollection",
      "fetchCollection(address):((string,address,address))",
      [ethereum.Value.fromAddress(_collection)]
    );

    return changetype<MXCCollectionFactory__fetchCollectionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_fetchCollection(
    _collection: Address
  ): ethereum.CallResult<
    MXCCollectionFactory__fetchCollectionResultValue0Struct
  > {
    let result = super.tryCall(
      "fetchCollection",
      "fetchCollection(address):((string,address,address))",
      [ethereum.Value.fromAddress(_collection)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MXCCollectionFactory__fetchCollectionResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  fetchCollections(): Array<
    MXCCollectionFactory__fetchCollectionsResultValue0Struct
  > {
    let result = super.call(
      "fetchCollections",
      "fetchCollections():((string,address,address)[])",
      []
    );

    return result[0].toTupleArray<
      MXCCollectionFactory__fetchCollectionsResultValue0Struct
    >();
  }

  try_fetchCollections(): ethereum.CallResult<
    Array<MXCCollectionFactory__fetchCollectionsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchCollections",
      "fetchCollections():((string,address,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MXCCollectionFactory__fetchCollectionsResultValue0Struct
      >()
    );
  }

  fetchCollectionsLength(): BigInt {
    let result = super.call(
      "fetchCollectionsLength",
      "fetchCollectionsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fetchCollectionsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fetchCollectionsLength",
      "fetchCollectionsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fetchUserCollections(
    _user: Address
  ): Array<MXCCollectionFactory__fetchUserCollectionsResultValue0Struct> {
    let result = super.call(
      "fetchUserCollections",
      "fetchUserCollections(address):((string,address,address)[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toTupleArray<
      MXCCollectionFactory__fetchUserCollectionsResultValue0Struct
    >();
  }

  try_fetchUserCollections(
    _user: Address
  ): ethereum.CallResult<
    Array<MXCCollectionFactory__fetchUserCollectionsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchUserCollections",
      "fetchUserCollections(address):((string,address,address)[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MXCCollectionFactory__fetchUserCollectionsResultValue0Struct
      >()
    );
  }
}

export class CreateCollectionCall extends ethereum.Call {
  get inputs(): CreateCollectionCall__Inputs {
    return new CreateCollectionCall__Inputs(this);
  }

  get outputs(): CreateCollectionCall__Outputs {
    return new CreateCollectionCall__Outputs(this);
  }
}

export class CreateCollectionCall__Inputs {
  _call: CreateCollectionCall;

  constructor(call: CreateCollectionCall) {
    this._call = call;
  }

  get _marketplaceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _royaltiesCutPerMillion(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _royaltyRecipient(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _ipfs(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class CreateCollectionCall__Outputs {
  _call: CreateCollectionCall;

  constructor(call: CreateCollectionCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DelCollectionCall extends ethereum.Call {
  get inputs(): DelCollectionCall__Inputs {
    return new DelCollectionCall__Inputs(this);
  }

  get outputs(): DelCollectionCall__Outputs {
    return new DelCollectionCall__Outputs(this);
  }
}

export class DelCollectionCall__Inputs {
  _call: DelCollectionCall;

  constructor(call: DelCollectionCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelCollectionCall__Outputs {
  _call: DelCollectionCall;

  constructor(call: DelCollectionCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class EditCollectionCall extends ethereum.Call {
  get inputs(): EditCollectionCall__Inputs {
    return new EditCollectionCall__Inputs(this);
  }

  get outputs(): EditCollectionCall__Outputs {
    return new EditCollectionCall__Outputs(this);
  }
}

export class EditCollectionCall__Inputs {
  _call: EditCollectionCall;

  constructor(call: EditCollectionCall) {
    this._call = call;
  }

  get _collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ipfs(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class EditCollectionCall__Outputs {
  _call: EditCollectionCall;

  constructor(call: EditCollectionCall) {
    this._call = call;
  }
}
